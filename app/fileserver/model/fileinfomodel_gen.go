// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	fileInfoFieldNames          = builder.RawFieldNames(&FileInfo{})
	fileInfoRows                = strings.Join(fileInfoFieldNames, ",")
	fileInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(fileInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	fileInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(fileInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheFileInfoIdPrefix     = "cache:fileInfo:id:"
	cacheFileInfoFileIdPrefix = "cache:fileInfo:fileId:"
)

type (
	fileInfoModel interface {
		Insert(ctx context.Context, data *FileInfo) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*FileInfo, error)
		FindOneByFileId(ctx context.Context, fileId string) (*FileInfo, error)
		Update(ctx context.Context, data *FileInfo) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultFileInfoModel struct {
		sqlc.CachedConn
		table string
	}

	FileInfo struct {
		Id          uint64 `db:"id"`           // 主键ID
		FileId      string `db:"file_id"`      // 文件唯一ID (UUID)
		FileName    string `db:"file_name"`    // 原始文件名
		Bucket      string `db:"bucket"`       // 存储桶
		ObjectName  string `db:"object_name"`  // 存储路径/对象名
		Size        int64  `db:"size"`         // 文件大小（字节）
		ContentType string `db:"content_type"` // 文件类型（MIME）
		Uploader    uint64 `db:"uploader"`     // 上传者用户ID
		UploadTime  int64  `db:"upload_time"`  // 上传时间
		Hash        string `db:"hash"`         // 文件哈希值
		Description string `db:"description"`  // 文件描述
		DeletedTime int64  `db:"deleted_time"` // 删除时间
		Status      int64  `db:"status"`       // 状态（1=正常，0=已删除）
	}
)

func newFileInfoModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultFileInfoModel {
	return &defaultFileInfoModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`file_info`",
	}
}

func (m *defaultFileInfoModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	fileInfoFileIdKey := fmt.Sprintf("%s%v", cacheFileInfoFileIdPrefix, data.FileId)
	fileInfoIdKey := fmt.Sprintf("%s%v", cacheFileInfoIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, fileInfoFileIdKey, fileInfoIdKey)
	return err
}

func (m *defaultFileInfoModel) FindOne(ctx context.Context, id uint64) (*FileInfo, error) {
	fileInfoIdKey := fmt.Sprintf("%s%v", cacheFileInfoIdPrefix, id)
	var resp FileInfo
	err := m.QueryRowCtx(ctx, &resp, fileInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fileInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFileInfoModel) FindOneByFileId(ctx context.Context, fileId string) (*FileInfo, error) {
	fileInfoFileIdKey := fmt.Sprintf("%s%v", cacheFileInfoFileIdPrefix, fileId)
	var resp FileInfo
	err := m.QueryRowIndexCtx(ctx, &resp, fileInfoFileIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `file_id` = ? limit 1", fileInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, fileId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFileInfoModel) Insert(ctx context.Context, data *FileInfo) (sql.Result, error) {
	fileInfoFileIdKey := fmt.Sprintf("%s%v", cacheFileInfoFileIdPrefix, data.FileId)
	fileInfoIdKey := fmt.Sprintf("%s%v", cacheFileInfoIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, fileInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FileId, data.FileName, data.Bucket, data.ObjectName, data.Size, data.ContentType, data.Uploader, data.UploadTime, data.Hash, data.Description, data.DeletedTime, data.Status)
	}, fileInfoFileIdKey, fileInfoIdKey)
	return ret, err
}

func (m *defaultFileInfoModel) Update(ctx context.Context, newData *FileInfo) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	fileInfoFileIdKey := fmt.Sprintf("%s%v", cacheFileInfoFileIdPrefix, data.FileId)
	fileInfoIdKey := fmt.Sprintf("%s%v", cacheFileInfoIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, fileInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.FileId, newData.FileName, newData.Bucket, newData.ObjectName, newData.Size, newData.ContentType, newData.Uploader, newData.UploadTime, newData.Hash, newData.Description, newData.DeletedTime, newData.Status, newData.Id)
	}, fileInfoFileIdKey, fileInfoIdKey)
	return err
}

func (m *defaultFileInfoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheFileInfoIdPrefix, primary)
}

func (m *defaultFileInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fileInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFileInfoModel) tableName() string {
	return m.table
}
