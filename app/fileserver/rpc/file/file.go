// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0
// Source: file.proto

package file

import (
	"context"

	"github.com/cy77cc/hioshop_ms/app/fileserver/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	UploadChunk    = pb.UploadChunk
	UploadResponse = pb.UploadResponse

	File interface {
		// 客户端流：客户端连续发送 UploadChunk，结束后服务端返回 UploadResponse
		Upload(ctx context.Context, opts ...grpc.CallOption) (pb.File_UploadClient, error)
	}

	defaultFile struct {
		cli zrpc.Client
	}
)

func NewFile(cli zrpc.Client) File {
	return &defaultFile{
		cli: cli,
	}
}

// 客户端流：客户端连续发送 UploadChunk，结束后服务端返回 UploadResponse
func (m *defaultFile) Upload(ctx context.Context, opts ...grpc.CallOption) (pb.File_UploadClient, error) {
	client := pb.NewFileClient(m.cli.Conn())
	return client.Upload(ctx, opts...)
}
