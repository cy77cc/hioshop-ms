// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0
// Source: file.proto

package file

import (
	"context"

	"github.com/cy77cc/hioshop_ms/app/fileserver/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CompleteUploadReq  = pb.CompleteUploadReq
	CompleteUploadResp = pb.CompleteUploadResp
	InitUploadReq      = pb.InitUploadReq
	InitUploadResp     = pb.InitUploadResp
	UploadPartReq      = pb.UploadPartReq
	UploadPartResp     = pb.UploadPartResp

	File interface {
		InitUpload(ctx context.Context, in *InitUploadReq, opts ...grpc.CallOption) (*InitUploadResp, error)
		// 流式上传分片
		UploadPart(ctx context.Context, opts ...grpc.CallOption) (pb.File_UploadPartClient, error)
		CompleteUpload(ctx context.Context, in *CompleteUploadReq, opts ...grpc.CallOption) (*CompleteUploadResp, error)
	}

	defaultFile struct {
		cli zrpc.Client
	}
)

func NewFile(cli zrpc.Client) File {
	return &defaultFile{
		cli: cli,
	}
}

func (m *defaultFile) InitUpload(ctx context.Context, in *InitUploadReq, opts ...grpc.CallOption) (*InitUploadResp, error) {
	client := pb.NewFileClient(m.cli.Conn())
	return client.InitUpload(ctx, in, opts...)
}

// 流式上传分片
func (m *defaultFile) UploadPart(ctx context.Context, opts ...grpc.CallOption) (pb.File_UploadPartClient, error) {
	client := pb.NewFileClient(m.cli.Conn())
	return client.UploadPart(ctx, opts...)
}

func (m *defaultFile) CompleteUpload(ctx context.Context, in *CompleteUploadReq, opts ...grpc.CallOption) (*CompleteUploadResp, error) {
	client := pb.NewFileClient(m.cli.Conn())
	return client.CompleteUpload(ctx, in, opts...)
}
